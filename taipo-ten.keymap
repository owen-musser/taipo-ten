#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/behaviors.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp R       &kp S       &kp N       &kp I       &kp SPACE
                &kp A       &kp O       &kp T       &kp T       &kp BACKSPACE
            >;
        };

        gaming_layer {
            bindings = <
                &kp ESC     &kp S       &kp W       &kp T       &kp SPACE
                &kp LSHFT   &kp A       &kp S       &kp D       &kp BACKSPACE
            >;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Alphas
        combo_a {
            bindings = <&kp A>;
            key-positions = <5>; // Position of 'a'
        };
        combo_b {
            bindings = <&kp B>;
            key-positions = <0 1>; // r + s
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY; // Adjust if needed
            #endif
        };
        combo_c {
            bindings = <&kp C>;
            key-positions = <6 7>; // o + t (o + e from your description, assuming 't' is 'e')
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_d {
            bindings = <&kp D>;
            key-positions = <5 7>; // a + t (a + e from your description, assuming 't' is 'e')
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_e {
            bindings = <&kp E>;
            key-positions = <7>; // Position of 't' (e)
        };
        combo_f {
            bindings = <&kp F>;
            key-positions = <1 3>; // s + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_g {
            bindings = <&kp G>;
            key-positions = <0 3>; // r + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_h {
            bindings = <&kp H>;
            key-positions = <7 7>; // t + t (t + e) - assuming 't' at pos 7 is 'e'
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_i {
            bindings = <&kp I>;
            key-positions = <3>; // Position of 'i'
        };
        combo_j {
            bindings = <&kp J>;
            key-positions = <5 2>; // a + n
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_k {
            bindings = <&kp K>;
            key-positions = <6 3>; // o + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_l {
            bindings = <&kp L>;
            key-positions = <5 6>; // a + o
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_m {
            bindings = <&kp M>;
            key-positions = <0 7>; // r + t (r + e)
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_n {
            bindings = <&kp N>;
            key-positions = <2>; // Position of 'n'
        };
        combo_o {
            bindings = <&kp O>;
            key-positions = <6>; // Position of 'o'
        };
        combo_p {
            bindings = <&kp P>;
            key-positions = <1 2>; // s + n
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_q {
            bindings = <&kp Q>;
            key-positions = <5 7>; // a + t
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_r {
            bindings = <&kp R>;
            key-positions = <0>; // Position of 'r'
        };
        combo_s {
            bindings = <&kp S>;
            key-positions = <1>; // Position of 's'
        };
        combo_t {
            bindings = <&kp T>;
            key-positions = <7>; // Position of 't'
        };
        combo_u {
            bindings = <&kp U>;
            key-positions = <6 7>; // o + t
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_v {
            bindings = <&kp V>;
            key-positions = <1 7>; // s + t (s + e)
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_w {
            bindings = <&kp W>;
            key-positions = <5 3>; // a + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_x {
            bindings = <&kp X>;
            key-positions = <0 7>; // r + t
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_y {
            bindings = <&kp Y>;
            key-positions = <2 3>; // n + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_z {
            bindings = <&kp Z>;
            key-positions = <0 2>; // r + n
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };

        // Numbers (0-9)
        combo_0 {
            bindings = <&kp N0>;
            key-positions = <7 6 4>; // t (e) + o + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_1 {
            bindings = <&kp N1>;
            key-positions = <7 6 4>; // t (e) + o + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_2 {
            bindings = <&kp N2>;
            key-positions = <7 6 4>; // t + o + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_3 {
            bindings = <&kp N3>;
            key-positions = <7 5 4>; // t + a + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_4 {
            bindings = <&kp N4>;
            key-positions = <6 5 4>; // o + a + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_5 {
            bindings = <&kp N5>;
            key-positions = <3 2 4>; // i + n + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_6 {
            bindings = <&kp N6>;
            key-positions = <3 1 4>; // i + s + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_7 {
            bindings = <&kp N7>;
            key-positions = <2 1 4>; // n + s + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_8 {
            bindings = <&kp N8>;
            key-positions = <2 0 4>; // n + r + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_9 {
            bindings = <&kp N9>;
            key-positions = <1 0 4>; // s + r + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };

        // Parentheses and Brackets
        combo_paren_open {
            bindings = <&kp LPAR>;
            key-positions = <7 9>; // t (e) + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_paren_close {
            bindings = <&kp RPAR>;
            key-positions = <3 9>; // i + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_sq_open {
            bindings = <&kp LBKT>;
            key-positions = <7 9>; // t + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_sq_close {
            bindings = <&kp RBKT>;
            key-positions = <2 9>; // n + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_curly_open {
            bindings = <&kp LBRC>;
            key-positions = <6 9>; // o + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_curly_close {
            bindings = <&kp RBRC>;
            key-positions = <1 9>; // s + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_lt {
            bindings = <&kp LT>;
            key-positions = <5 9>; // a + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_gt {
            bindings = <&kp GT>;
            key-positions = <0 9>; // r + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };

        // Symbols
        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <0 3 9>; // r + i + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <0 7 9>; // r + t + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <5 2 9>; // a + n + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_dollar {
            bindings = <&kp DLLR>;
            key-positions = <0 7 9>; // r + t (e) + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_bslash {
            bindings = <&kp BSLASH>;
            key-positions = <6 3 4>; // o + i + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <6 3 9>; // o + i + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_fslash {
            bindings = <&kp FSLH>;
            key-positions = <6 3>; // o + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <0 6>; // r + o
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <0 6 4>; // r + o + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <2 7>; // n + t (e)
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_period {
            bindings = <&kp DOT>;
            key-positions = <2 7 4>; // n + t (e) + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <2 7 9>; // n + t (e) + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_at {
            bindings = <&kp AT>;
            key-positions = <5 7 9>; // a + t (e) + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <6 3 9>; // o + i + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <5 2 9>; // a + n + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_ampersand {
            bindings = <&kp AMPS>;
            key-positions = <5 3 9>; // a + i + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <6 2>; // o + n
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <6 2 4>; // o + n + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <6 2 9>; // o + n + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_qmark {
            bindings = <&kp QMARK>;
            key-positions = <7 3>; // t + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_exclam {
            bindings = <&kp EXCLAMATION>;
            key-positions = <7 3 4>; // t + i + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_squote {
            bindings = <&kp SQT>;
            key-positions = <5 1>; // a + s
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_dquote {
            bindings = <&kp DQT>;
            key-positions = <5 1 4>; // a + s + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_bquote {
            bindings = <&kp GRAVE>;
            key-positions = <5 1 9>; // a + s + backspace
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };

        // Navigation & Special Keys
        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <1 2 3>; // s + n + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_enter {
            bindings = <&kp RET>;
            key-positions = <6 7 7>; // o + t + t (e)
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <6 7 7 4>; // o + t + t (e) + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_left {
            bindings = <&kp LEFT>;
            key-positions = <6 4>; // o + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_up {
            bindings = <&kp UP>;
            key-positions = <2 4>; // n + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <7 4>; // t (e) + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_down {
            bindings = <&kp DOWN>;
            key-positions = <7 4>; // t + space
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        combo_layer_switch {
            bindings = <&tog 1>; // Toggle to gaming_layer (layer 1)
            key-positions = <0 1 2 3>; // r + s + n + i
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };

        // One-Shot Keys
        one_shot_gui {
            bindings = <&os LWIN>;
            key-positions = <7 3>; // t (e) + i
            timeout-ms = <1500>; // Adjust as needed
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        one_shot_ctrl {
            bindings = <&os LCTRL>;
            key-positions = <7 2>; // t + n
            timeout-ms = <1500>;
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        one_shot_alt {
            bindings = <&os LALT>;
            key-positions = <6 1>; // o + s
            timeout-ms = <1500>;
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        one_shot_shift {
            bindings = <&os LSHFT>;
            key-positions = <5 0>; // a + r
            timeout-ms = <1500>;
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        one_shot_del {
            bindings = <&os DEL>;
            key-positions = <1 2 3 4>; // s + n + i + space
            timeout-ms = <1500>;
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        one_shot_fn {
            bindings = <&os F24>; // Placeholder for a generic FN key, adjust as needed
            key-positions = <1 2 3 9>; // s + n + i + backspace
            timeout-ms = <1500>;
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
        // MACRO 0-9: This is complex. ZMK does not have a direct "macro" key like some firmwares.
        // You would typically define individual macros using &macro_tap or &macro_press/&macro_release
        // and then bind them to a combo. For simplicity, I'm just putting a placeholder.
        // You would need to define 10 separate macros (e.g., &macro_0, &macro_1, etc.)
        one_shot_macro {
            bindings = <&none>; // Placeholder for macro functionality.
            // You would replace this with actual macro definitions, e.g., &macro_send MACRO_0_SEQ
            key-positions = <5 6 7 7>; // a + o + t + t (e)
            timeout-ms = <1500>;
            #ifdef COMBO_HOLD_PRIORITY
            priority = COMBO_HOLD_PRIORITY;
            #endif
        };
    };
};

/ {
    behaviors {
        // Define one-shot behavior
        os: os {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT";
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-timeout-ms = <300>; // Time to hold for sticky behavior
            tap-dance-timeout-ms = <150>; // Not directly used here, but good practice
        };
    };
};